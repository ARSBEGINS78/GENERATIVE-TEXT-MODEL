# Generative Text Model Notebook

import openai
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Embedding, Dense
import numpy as np

# OpenAI GPT-based Text Generation
def generate_text_gpt(prompt, api_key, model="gpt-4", max_tokens=200):
    openai.api_key = api_key
    response = openai.ChatCompletion.create(
        model=model,
        messages=[{"role": "system", "content": "You are a helpful assistant."},
                  {"role": "user", "content": prompt}],
        max_tokens=max_tokens
    )
    return response["choices"][0]["message"]["content"].strip()

# LSTM-based Text Generation (Training a Simple Model)
def train_lstm_model(text_data, vocab_size=10000, embedding_dim=64, lstm_units=128, max_length=50):
    tokenizer = Tokenizer(num_words=vocab_size, oov_token="<OOV>")
    tokenizer.fit_on_texts(text_data)
    sequences = tokenizer.texts_to_sequences(text_data)
    padded_sequences = pad_sequences(sequences, maxlen=max_length, padding="post")
    
    model = Sequential([
        Embedding(vocab_size, embedding_dim, input_length=max_length),
        LSTM(lstm_units, return_sequences=True),
        LSTM(lstm_units),
        Dense(vocab_size, activation="softmax")
    ])
    
    model.compile(loss="sparse_categorical_crossentropy", optimizer="adam", metrics=["accuracy"])
    model.summary()
    return model, tokenizer

# Generate Text Using LSTM
def generate_text_lstm(model, tokenizer, seed_text, max_length=50, num_words=50):
    result = seed_text
    for _ in range(num_words):
        sequence = tokenizer.texts_to_sequences([result])
        padded_sequence = pad_sequences(sequence, maxlen=max_length, padding="post")
        predicted_index = np.argmax(model.predict(padded_sequence), axis=-1)[0]
        predicted_word = tokenizer.index_word.get(predicted_index, "")
        result += " " + predicted_word
    return result

# Example Usage:
if __name__ == "__main__":
    # API Key required for GPT
    # api_key = "your_openai_api_key"
    # print(generate_text_gpt("Explain the importance of AI in healthcare", api_key))

    # LSTM Model Training
    text_samples = ["This is a sample text dataset used for training.", "Text generation using LSTM is interesting."]
    lstm_model, lstm_tokenizer = train_lstm_model(text_samples)
    print(generate_text_lstm(lstm_model, lstm_tokenizer, "Text generation"))
